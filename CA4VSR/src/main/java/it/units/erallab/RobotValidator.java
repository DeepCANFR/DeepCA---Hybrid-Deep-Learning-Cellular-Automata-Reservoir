package it.units.erallab;

import com.google.common.collect.Lists;
import it.units.erallab.hmsrobots.core.controllers.Controller;
import it.units.erallab.hmsrobots.core.controllers.TimeFunctions;
import it.units.erallab.hmsrobots.core.objects.ControllableVoxel;
import it.units.erallab.hmsrobots.core.objects.Robot;
import it.units.erallab.hmsrobots.core.objects.Voxel;
import it.units.erallab.hmsrobots.tasks.Locomotion;
import it.units.erallab.hmsrobots.tasks.Task;
import it.units.erallab.hmsrobots.util.Grid;
import it.units.erallab.hmsrobots.util.Point2;
import it.units.erallab.hmsrobots.viewers.*;
import it.units.erallab.hmsrobots.viewers.drawers.Ground;
import it.units.erallab.hmsrobots.viewers.drawers.SensorReading;
import org.apache.commons.lang3.SerializationUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.dyn4j.dynamics.Settings;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static it.units.erallab.BodyOptimization.computeKSStatistics;

public class RobotValidator {
    static void validateGridOfRobots(List<Pair<String, Robot<? extends Voxel>>> robots, int w, int h, Task<?, ?> task, boolean video, String outputName) throws IOException {

        ScheduledExecutorService uiExecutor = Executors.newScheduledThreadPool(robots.size()+1);
        ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());

        Grid<Pair<String, Robot<?>>> namedRobotsGrid = Grid.create(w, h, (x,y) -> robots.get(x+w*y));

        if (video) {
            double frameRate = 30;
            int videoW = 1024;
            int videoH = 768;
            GridSnapshotListener gridSnapshotListener = new GridFileWriter(
                    videoW, videoH, frameRate,
                    new File(outputName+".mp4"),
                    Grid.create(namedRobotsGrid, Pair::getLeft),
                    uiExecutor,
                    GraphicsDrawer.build().setConfigurable("drawers", List.of(
                            it.units.erallab.hmsrobots.viewers.drawers.Robot.build(),
                            it.units.erallab.hmsrobots.viewers.drawers.Voxel.build(),
                            Ground.build(),
                            SensorReading.build()
                    )).setConfigurable("generalRenderingModes", Set.of(
                            GraphicsDrawer.GeneralRenderingMode.GRID_MAJOR,
                            GraphicsDrawer.GeneralRenderingMode.TIME_INFO,
                            GraphicsDrawer.GeneralRenderingMode.VOXEL_COMPOUND_CENTERS_INFO
                    ))
            );
            GridEpisodeRunner<Robot<? extends Voxel>> runner = new GridEpisodeRunner(
                    Grid.create(w, h, (x,y) -> robots.get(x+y*w)),
                    task,
                    gridSnapshotListener,
                    executor
            );
            runner.run();
            executor.shutdownNow();
            uiExecutor.shutdownNow();
        } else {
            GridOnlineViewer gridOnlineViewer = new GridOnlineViewer(
                    Grid.create(w, h, (x,y) -> robots.get(x+w*y).getLeft()),
                    uiExecutor,
                    GraphicsDrawer.build().setConfigurable("drawers", List.of(
                            it.units.erallab.hmsrobots.viewers.drawers.Robot.build(),
                            it.units.erallab.hmsrobots.viewers.drawers.Voxel.build(),
                            it.units.erallab.hmsrobots.viewers.drawers.Ground.build()
                    ))
            );
            gridOnlineViewer.start(0); // delay from beginning of the simulation

            GridEpisodeRunner<Robot<? extends Voxel>> runner = new GridEpisodeRunner(
                    Grid.create(w, h, (x,y) -> robots.get(x+y*w)),
                    task,
                    gridOnlineViewer,
                    executor
            );
            runner.run();
        }
    }

    public static double validateBodyCriticality(Grid<ControllableVoxel> body) {
        for (int x = 0; x < body.getW(); x++) {
            for (int y = 0; y < body.getH(); y++) {
                if (body.get(x, y) != null) {
                    body.set(x, y, SerializationUtils.clone(Material.softMaterial));
                }
            }
        }

        double pulseDuration = 0.4;
        int binSize = 5;
        double finalT = 20;

        CriticalityEvaluator task = new CriticalityEvaluator(
                finalT, // task duration
                new Settings() // default settings for the physics engine
        );

        int bodySize = (int) body.values().stream().filter(Objects::nonNull).count();
        if (bodySize < 2) {
            return 0.0;
        }
        double[] avalanchesSpatialExtension = new double[bodySize + 1];
        double[] avalanchesTemporalExtension = new double[100];

        // a pulse controller is applied on each voxel
        body.stream()
                .filter(Objects::nonNull)
                .forEach(voxel -> {
                    Controller<ControllableVoxel> pulseController = new TimeFunctions(Grid.create(body.getW(), body.getH(), (x, y) -> (Double t) -> {
                        if (x == voxel.getX() && y == voxel.getY()) {
                            if (t < pulseDuration/2) {
                                return 1.0;
                            } else if (t < pulseDuration) {
                                return -1.0;
                            }
                        }
                        return 0.0;
                    }));
                    List<Double> metrics = task.apply(new Robot<>(pulseController, SerializationUtils.clone(body)));
                    if (metrics.get(0).intValue() > 0) {
                        avalanchesSpatialExtension[metrics.get(0).intValue()] += 1;
                    }
                    if (metrics.get(1).intValue() > 0) {
                        avalanchesTemporalExtension[(metrics.get(1).intValue()) / binSize] += 1;
                    }
                });
        // exit condition
        int spatialSizeNumber = (int) Arrays.stream(avalanchesSpatialExtension).filter(frequency -> frequency > 0).count();
        int temporalSizeNumber = (int) Arrays.stream(avalanchesTemporalExtension).filter(frequency -> frequency > 0).count();
        if (spatialSizeNumber < 2) { //if (spatialSizeNumber < 2 || temporalSizeNumber < 2) {
            return 0.0;
        }
        // compute the log-log of the 2 distributions
        List<Point2> logLogSpatialDistribution = IntStream.range(1, avalanchesSpatialExtension.length)
                .mapToObj(i -> Point2.build(Math.log10(i), avalanchesSpatialExtension[i] > 0.0 ? Math.log10(avalanchesSpatialExtension[i]) : 0))
                .collect(Collectors.toList());
        // linear regression of the log-log distribution
        LinearRegression spatialLinearRegression = new LinearRegression(logLogSpatialDistribution);
        double RSquared = 0;
        if (!Double.isNaN(spatialLinearRegression.R2())) {
            RSquared = spatialLinearRegression.R2();
        }
        // 3. KS statistics
        double ks1 = computeKSStatistics(logLogSpatialDistribution, spatialLinearRegression);
        double DSquared = Math.pow(Math.exp(-(0.9 * Math.min(ks1, ks1) + 0.1 * (ks1 + ks1)/2)), 2d);
        return RSquared + DSquared;
    }

    public static void visualize(String serializedRobotsFile, boolean makeVideo, String taskName) throws IOException {

        // old phase
        List<Pair<String, Robot<? extends Voxel>>> phaseLocomotionRobots = List.of(
                Pair.of("opt", it.units.erallab.Utils.safelyDeserialize("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", Robot.class)),
                Pair.of("random", it.units.erallab.Utils.safelyDeserialize("", Robot.class)),
                Pair.of("box", it.units.erallab.Utils.safelyDeserialize("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", Robot.class))
        );

        List<Pair<String, Robot<? extends Voxel>>> phasejumpRobots = List.of(
                Pair.of("opt", it.units.erallab.Utils.safelyDeserialize("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", Robot.class)),
                Pair.of("random", it.units.erallab.Utils.safelyDeserialize("", Robot.class)),
                Pair.of("box", it.units.erallab.Utils.safelyDeserialize("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", Robot.class))
        );

        List<Pair<String, Robot<? extends Voxel>>> phaseEscapeRobots = List.of(
                Pair.of("opt", it.units.erallab.Utils.safelyDeserialize("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", Robot.class)),
                Pair.of("random", it.units.erallab.Utils.safelyDeserialize("", Robot.class)),
                Pair.of("box", it.units.erallab.Utils.safelyDeserialize("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", Robot.class))
        );

        // new centralized
        List<Pair<String, Robot<? extends Voxel>>> locomotionRobots = new ArrayList<>();
        List<Pair<String, Robot<? extends Voxel>>> jumpRobots = new ArrayList<>();
        List<Pair<String, Robot<? extends Voxel>>> escapeRobots = new ArrayList<>();

        BufferedReader csvReader = new BufferedReader(new FileReader(serializedRobotsFile));
        String row;

        boolean firstLine = true;
        while ((row = csvReader.readLine()) != null) {
            if (!firstLine) {
                String[] data = row.split("\t");
                String robot = data[0];
                String locomotionRobot = data[1];
                locomotionRobots.add(Pair.of(robot, it.units.erallab.Utils.safelyDeserialize(locomotionRobot, Robot.class)));
                String jumpRobot = data[2];
                jumpRobots.add(Pair.of(robot, it.units.erallab.Utils.safelyDeserialize(jumpRobot, Robot.class)));
                String escapeRobot = data[3];
                escapeRobots.add(Pair.of(robot, it.units.erallab.Utils.safelyDeserialize(escapeRobot, Robot.class)));
            } else {
                firstLine = false;
            }
        }
        csvReader.close();
        if (taskName.equals("locomotion")) {
            Task<?, ?> locomotion = new Locomotion(
                    20,
                    Locomotion.createTerrain("flat"),
                    Lists.newArrayList(Locomotion.Metric.TRAVEL_X_VELOCITY),
                    new Settings()
            );
            validateGridOfRobots(locomotionRobots, 3, 2, locomotion, false, "locomotion");
        } else if (taskName.equals("jump")) {
            Task<?, ?> jump = new Jump(
                    20,
                    Jump.createTerrain("bowl"),
                    1.0,
                    Lists.newArrayList(Jump.Metric.CENTER_JUMP),
                    new Settings()
            );
            validateGridOfRobots(jumpRobots, 3, 2, jump, false, "jump");
        } else if(taskName.equals("escape")) {
            Task<?, ?> escape = new Escape(
                    40.0,
                    Lists.newArrayList(Locomotion.Metric.TRAVEL_X_VELOCITY),
                    new Settings()
            );
            validateGridOfRobots(escapeRobots, 3, 2, escape, false, "escape");
        }
    }



    public static void main(String[] args) {
        try {
            visualize("C:\\Users\\jacopota\\experiments\\robot\\phase-v210_40_40@11-11-2020.csv", false, "escape");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
