package it.units.erallab;

import it.units.erallab.hmsrobots.core.objects.ControllableVoxel;
import it.units.erallab.hmsrobots.util.Grid;
import it.units.erallab.hmsrobots.util.Point2;
import org.apache.commons.lang3.SerializationUtils;

import java.io.*;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

public class Utils {

    private static final Logger L = Logger.getLogger(Utils.class.getName());
    private Utils() {}

    public static List<String> optimizedBodies = List.of(
            "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"
    );

    public static List<String> randomBodies = List.of(
            "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"
    );

    public static List<String> pseudoRandomBodies = List.of(
            "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"
    );

    public static List<String> minimizeCriticalityBodies = List.of(
            "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"
    );

    public static String safelySerialize(Serializable object) {
        try (
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(new GZIPOutputStream(baos, true))
        ) {
            oos.writeObject(object);
            oos.flush();
            oos.close();
        return Base64.getEncoder().encodeToString(baos.toByteArray());
        } catch (IOException e) {
            L.log(Level.SEVERE, String.format("Cannot serialize due to %s", e), e);
            return "";
        }
    }

    public static <T> T safelyDeserialize(String string, Class<T> tClass) {
        try (ByteArrayInputStream bais = new ByteArrayInputStream(Base64.getDecoder().decode(string));
            ObjectInputStream ois = new ObjectInputStream(new GZIPInputStream(bais))
        ) {
            Object o = ois.readObject();
            return (T) o;
        } catch (IOException | ClassNotFoundException e) {
            L.log(Level.SEVERE, String.format("Cannot deserialize due to %s", e), e);
            return null;
        }
    }

    public static double[][] createHillyTerrain(double h, double w, int seed) {
        double TERRAIN_BORDER_HEIGHT = 100d;
        int TERRAIN_LENGHT = 2000;
        Random random = new Random(seed);
        List<Double> xs = new ArrayList<>(List.of(0d, 10d));
        List<Double> ys = new ArrayList<>(List.of(TERRAIN_BORDER_HEIGHT, 0d));
        while (xs.get(xs.size() - 1) < TERRAIN_LENGHT) {
            xs.add(xs.get(xs.size() - 1) + Math.max(1d, (random.nextGaussian() * 0.25 + 1) * w));
            ys.add(ys.get(ys.size() - 1) + random.nextGaussian() * h);
        }
        xs.addAll(List.of(xs.get(xs.size() - 1) + 10, xs.get(xs.size() - 1) + 20));
        ys.addAll(List.of(0d, TERRAIN_BORDER_HEIGHT));
        return new double[][]{
            xs.stream().mapToDouble(d -> d).toArray(),
            ys.stream().mapToDouble(d -> d).toArray()
        };
    }

    private static Grid<ControllableVoxel> getPseudoRandomNeighbour(Grid<ControllableVoxel> body, int x, int y, int numberOfVoxels, Random random, ControllableVoxel material) {
        if (body.values().stream().filter(Objects::nonNull).count() == numberOfVoxels) {
            return body;
        } else {
            // set voxel
            body.set(x, y, SerializationUtils.clone(material));
            List<Point2> neighbours = new ArrayList<>();

            if (x-1 >= 0) {
                neighbours.add(Point2.build(x - 1, y));
            }
            if (x+1 < body.getW()) {
                neighbours.add(Point2.build(x+1, y));
            }
            if (y-1 >= 0) {
                neighbours.add(Point2.build(x, y-1));
            }
            if (y+1 < body.getH()) {
                neighbours.add(Point2.build(x, y+1));
            }
            Point2 randomNeighbour = neighbours.get(random.nextInt(neighbours.size()));
            return getPseudoRandomNeighbour(body, (int)randomNeighbour.x, (int)randomNeighbour.y, numberOfVoxels, random, material);
        }
    }

    public static Grid<ControllableVoxel> generatePseudoRandomBody(int numberOfVoxels, int gridSide, Random random, ControllableVoxel material) {
        Grid<ControllableVoxel> body = Grid.create(gridSide, gridSide);
        return getPseudoRandomNeighbour(body, random.nextInt(gridSide), random.nextInt(gridSide), numberOfVoxels, random, material);
    }

    public static Grid<ControllableVoxel> generateRandomBody(int numberOfVoxels, int gridSize, Random random, ControllableVoxel material) {
        Grid<ControllableVoxel> randomBody = Grid.create(gridSize, gridSize, (x, y) -> null);
        int n = 0;
        while (n < numberOfVoxels) {
            int pos = random.nextInt(gridSize*gridSize);
            int y = pos/gridSize;
            int x = pos - gridSize*y;
            randomBody.set(x, y, SerializationUtils.clone(material));
            n = (int) it.units.erallab.hmsrobots.util.Utils.gridLargestConnected(randomBody, Objects::nonNull).values().stream().filter(Objects::nonNull).count();
        }
        randomBody = it.units.erallab.hmsrobots.util.Utils.gridLargestConnected(randomBody, Objects::nonNull);
        randomBody = it.units.erallab.hmsrobots.util.Utils.cropGrid(randomBody, Objects::nonNull);
        return randomBody;
    }

    public static String bodyToString(Grid<ControllableVoxel> bestBody) {
        String bestBodyString = "";
        for (int y = 0; y < bestBody.getH(); y++) {
            for (int x = 0; x < bestBody.getW(); x++) {
                bestBodyString += bestBody.get(x, y) == null ? "0" : "X";
                bestBodyString += x == bestBody.getW()-1 ? "n " : " ";
            }
        }
        return bestBodyString;
    }
}

